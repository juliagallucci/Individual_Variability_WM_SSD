from nilearn.plotting import plot_stat_map, plot_anat, plot_img
from nilearn.glm.first_level import make_first_level_design_matrix
from nilearn.plotting import plot_design_matrix , plot_contrast_matrix
from nilearn.glm.first_level import FirstLevelModel
from nilearn import plotting
from nilearn.image import concat_imgs, mean_img
import pandas as pd
import os
import nibabel as nib
import numpy as np
import matplotlib.pyplot as plt

#extract event type info (block type, hits and false alarms)
def extract_event_onset(event_file):
    "extract event onset, duration and trial type, event file is a tsv type"
    
    event_df = pd.read_csv(event_file,delimiter='\t')
    df = event_df[['onset','duration','trial_type']]
    df = event_df.loc[event_df['trial_type'] == "oneback block"]
    df = df.replace('oneback block', 'oneback_block')
    df = df.append(event_df.loc[event_df['trial_type'] == "threeback block"])
    df= df.replace('threeback block', 'threeback_block')
    #collect hit information; where correct response and participant response = 1
    df_hit = event_df.loc[(event_df['correct_response'] == 1.0) & (event_df['participant_response'] == 1.0)]
    #collect fa information; where correct response =0 and participant response = 1
    df_fa = event_df.loc[(event_df['correct_response'] == 0.0) & (event_df['participant_response'] == 1.0)]
    df_hit = df_hit.replace('oneback','oneback_hit')
    df_hit = df_hit.replace('threeback','threeback_hit')
    df = df.append(df_hit)
    df_fa = df_fa.replace('threeback','threeback_false')
    df_fa = df_fa.replace('oneback','oneback_false')
    df = df. append(df_fa)
    df = df[['onset','duration','trial_type']]
    df= df.reset_index(drop=True)
    sorted_df = df[10:].sort_values(by='onset')
    sorted_df1 = df[:10].sort_values(by='onset')
    new_df = sorted_df1.append(sorted_df)
    new_df= new_df.reset_index(drop=True)
    
    return new_df
  

#extract regressors/confounds for model (CSF, White Matter, Global Signal, 6 parameters for Motion)
def extract_confound_regressors(regressor_file):
    "extract CSF, White matter, global signal and motion regressors"
    regressor_df = pd.read_csv(regressor_file,delimiter='\t')
    x = regressor_df.head()
    ls =[]
    for col in x:
        if "csf" in col:
            ls.append(col)
        if "white_matter" in col:
            ls.append(col)
        if "global_signal" in col:
            ls.append(col)
        if "rot_" in col:
            ls.append(col)
        if "trans_" in col:
            ls.append(col)

    df = regressor_df[ls]
    df = df[4:]
    for col in df:
        df[col] = df[col].sub(df[col].mean())

    return df
    
######################
for sub in files:
#define all inputs for the design matrix
    file = os.listdir('/projects/jgallucci/NEUR/data/preprocess/'+sub)
    nifti_img = os.path.join('/projects/jgallucci/NEUR/data/preprocess/'+sub, next(f for f in file if f.endswith('s6.nii')))
    func_img = nib.load(nifti_img)
    func_img.shape
    n_scans = func_img.shape[-1]
    data_dir='/archive/data/NEUR/data/bids'
    json_file = os.path.join(data_dir,sub, 'ses-01/func',
                         sub+'_ses-01_task-nbk_run-1_bold.json')
    import json
    with open(json_file, 'r') as f:
        t_r = json.load(f)['RepetitionTime']
        data_dir='/archive/data/RTMSWM/data/bids'
    
    frame_times = np.arange(n_scans)*t_r
    frame_times_shift = frame_times + t_r/2
    drift_model = 'polynomial'
    drift_order = 5
    hrf_model = 'spm + derivative + dispersion'

    # first level model input
    noise_model = 'ar1'
    regressor_file = '/projects/jgallucci/NEUR/data/preprocess/'+sub+'/'+sub+'_ses-01_task-nbk_run-1_desc-confounds_regressors.tsv'
    conf = extract_confound_regressors(regressor_file)
    onset_file = '/projects/jgallucci/NEUR/data/preprocess/'+sub+'/NEUR_CMH_'+sub[7:]+'_01_01_NBack.tsv'
    event = extract_event_onset(onset_file)

    #create design matrix
    dm = make_first_level_design_matrix(
        frame_times_shift, event, drift_model= drift_model, drift_order= drift_order,
        add_regs= conf, hrf_model=hrf_model)
    
    first_lv_model = FirstLevelModel(
        t_r=t_r,
        hrf_model=hrf_model,
        drift_model=drift_model,
        drift_order=drift_order,
        noise_model=noise_model,
        standardize=False,
        minimize_memory=False,
        mask_img=False,)
    first_lv_model = first_lv_model.fit(nifti_img, design_matrices=dm)
    contrast_matrix = np.eye(dm.shape[1])
    basic_contrasts = dict([(column, contrast_matrix[i]) for i, column in enumerate(dm.columns)])
    basic_contrasts["threeback_minus_oneback"] = (
    basic_contrasts["threeback_block"] - basic_contrasts["oneback_block"])
    
    #compute t-maps and beta-maps
    contrasts_id= ["threeback_minus_oneback","oneback_block","threeback_block"]
    t_map = first_lv_model.compute_contrast(basic_contrasts["threeback_block"],stat_type="t", output_type="stat")
    t_map.to_filename('/projects/jgallucci/NEUR/data/analysis/'+sub+'/'+sub+'_1st_GLM_threeback_tmap.nii.gz')
    t_map_1back = first_lv_model.compute_contrast(basic_contrasts["oneback_block"],stat_type = "t", output_type="stat")
    t_map_1back.to_filename('/projects/jgallucci/NEUR/data/analysis/'+sub+'/'+sub+'_1st_GLM_oneback_tmap.nii.gz')
    t_map_3min1back = first_lv_model.compute_contrast(basic_contrasts["threeback_minus_oneback"],stat_type = "t", output_type="stat")
    t_map_3min1back.to_filename('/projects/jgallucci/NEUR/data/analysis/'+sub+'/'+sub+'_1st_GLM_three_min_oneback_tmap.nii.gz')
    b_map = first_lv_model.compute_contrast(basic_contrasts["threeback_block"],output_type="effect_size")
    b_map.to_filename('/projects/jgallucci/NEUR/data/analysis/'+sub+'/'+sub+'_1st_GLM_threeback_betamap.nii.gz')
    b_map_1back = first_lv_model.compute_contrast(basic_contrasts["oneback_block"],output_type="effect_size")
    b_map_1back.to_filename('/projects/jgallucci/NEUR/data/analysis/'+sub+'/'+sub+'_1st_GLM_oneback_betamap.nii.gz')
    b_map_3min1back = first_lv_model.compute_contrast(basic_contrasts["threeback_minus_oneback"],output_type="effect_size")
    b_map_3min1back.to_filename('/projects/jgallucci/NEUR/data/analysis/'+sub+'/'+sub+'_1st_GLM_three_min_oneback_betamap.nii.gz')
    
